def calculate_utility(P):
    # Таблиця оцінок відчуттів за шкалою від 1 до 10 для кожного сценарію
    ratings = {
        "вдома_дощ": 4,   # Корисність відчуттів вдома під час дощу
        "вдома_сонце": 6, # Корисність відчуттів вдома під час сонця
        "ліс_дощ": 2,     # Корисність відчуттів у лісі під час дощу
        "ліс_сонце": 8    # Корисність відчуттів у лісі під час сонця
    }

    # Вивід таблиці відчуттів
    print("Таблиця відчуттів:")
    print("Вдома - Дощ:", ratings["вдома_дощ"])
    print("Вдома - Сонце:", ratings["вдома_сонце"])
    print("Ліс - Дощ:", ratings["ліс_дощ"])
    print("Ліс - Сонце:", ratings["ліс_сонце"])

    # Розрахунок корисності для рішення "Залишитися вдома"
    W_вдома = P * ratings["вдома_дощ"] + (1 - P) * ratings["вдома_сонце"]

    # Розрахунок корисності для рішення "Їхати в ліс"
    W_ліс = P * ratings["ліс_дощ"] + (1 - P) * ratings["ліс_сонце"]

    # Вивід результатів та рекомендації
    print(f"\nІмовірність дощу (P): {P}")
    print(f"Корисність рішення 'Залишитися вдома' (W_вдома): {W_вдома}")
    print(f"Корисність рішення 'Їхати в ліс' (W_ліс): {W_ліс}")

    if W_вдома > W_ліс:
        print("\nРекомендація: Залишитися вдома")
    else:
        print("\nРекомендація: Їхати в ліс")

# Приклад виклику функції з P = 0.6
P = 0.6
calculate_utility(P)
